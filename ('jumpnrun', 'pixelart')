


# Spiel kopiert von electronstogo:
# sein YouTube: https://www.youtube.com/channel/UCW0pKiON6s_zBtAqjZxycyQ
# sein GitHub: https://github.com/electronstogo/Simplified-jump-and-run-game-with-pygame
# kosmetische Ver√§nderungen vorgenommen

background_color = (255, 255, 0)
forground_color = (80, 240, 30)

SCREEN_WIDTH = 1920
SCREEN_HEIGHT = 1080

import pygame

levelList =[[SCREEN_WIDTH, SCREEN_HEIGHT - hob1, le1, wi1],
            [SCREEN_WIDTH, SCREEN_HEIGHT - hob2, le2, wi2],
            [SCREEN_WIDTH, SCREEN_HEIGHT - hob3, le3, wi3],
            [SCREEN_WIDTH, SCREEN_HEIGHT - hob4, le4, wi4],
            [SCREEN_WIDTH, SCREEN_HEIGHT - hob5, le5, wi5],
            [SCREEN_WIDTH, SCREEN_HEIGHT - hob6, le6, wi6],
            [SCREEN_WIDTH, SCREEN_HEIGHT - hob7, le7, wi7],
            [SCREEN_WIDTH, SCREEN_HEIGHT - hob8, le8, wi8],
            [SCREEN_WIDTH, SCREEN_HEIGHT - hob9, le9, wi9],
            [SCREEN_WIDTH, SCREEN_HEIGHT - hob10, le10, wi10],
            [SCREEN_WIDTH, SCREEN_HEIGHT - hob11, le11, wi11],
            [SCREEN_WIDTH, SCREEN_HEIGHT - hob12, le12, wi12],
            [SCREEN_WIDTH, SCREEN_HEIGHT - hob13, le13, wi13],
            [SCREEN_WIDTH, SCREEN_HEIGHT - hob14, le14, wi14],
            [SCREEN_WIDTH, SCREEN_HEIGHT - hob15, le15, wi15],
            [SCREEN_WIDTH, SCREEN_HEIGHT - hob16, le16, wi16],
            [SCREEN_WIDTH, SCREEN_HEIGHT - hob17, le17, wi17],
            [SCREEN_WIDTH, SCREEN_HEIGHT - hob18, le18, wi18],
            [SCREEN_WIDTH, SCREEN_HEIGHT - hob19, le19, wi19],
            [SCREEN_WIDTH, SCREEN_HEIGHT - hob20, le20, wi20],
            [SCREEN_WIDTH, SCREEN_HEIGHT - hob21, le21, wi21],
            [SCREEN_WIDTH, SCREEN_HEIGHT - hob22, le22, wi22],
            [SCREEN_WIDTH, SCREEN_HEIGHT - hob23, le23, wi23],
            [SCREEN_WIDTH, SCREEN_HEIGHT - hob24, le24, wi24],
            [SCREEN_WIDTH, SCREEN_HEIGHT - hob25, le25, wi25],
            [SCREEN_WIDTH, SCREEN_HEIGHT - hob26, le26, wi26],
            [SCREEN_WIDTH, SCREEN_HEIGHT - hob27, le27, wi27],
            [SCREEN_WIDTH, SCREEN_HEIGHT - hob28, le28, wi28],
            [SCREEN_WIDTH, SCREEN_HEIGHT - hob29, le29, wi29],
            [SCREEN_WIDTH, SCREEN_HEIGHT - hob30, le30, wi30],
            [SCREEN_WIDTH, SCREEN_HEIGHT - hob31, le31, wi31],
            [SCREEN_WIDTH, SCREEN_HEIGHT - hob32, le32, wi32]]
			
			#hob1, le1, wi1
                                   #height over botton <number>, lenght <number>, width <number>




class Player(pygame.sprite.Sprite):
    def __init__(self):
        super().__init__()

        self.image = pygame.image.load("player_pixelart.png")

        self.rect = self.image.get_rect()


        self.change_x = 0
        self.change_y = 0

        self.platformList = None
        self.gameOver = False



    def update(self):
        if self.rect.right < 0:
            self.gameOver = True

        if not self.gameOver:
            # handle x direction
            self.rect.x += self.change_x

            hitList = pygame.sprite.spritecollide(self, self.platformList, False)
            for platform in hitList:
                if self.change_x < 0:
                    self.rect.left = platform.rect.right
                elif self.change_x > 0 or platform.change_x < 0:
                    self.rect.right = platform.rect.left


            # # handle y direction
            self.gravity()
            self.rect.y += self.change_y

            hitList = pygame.sprite.spritecollide(self, self.platformList, False)
            for platform in hitList:
                if self.change_y > 0:
                    self.rect.bottom = platform.rect.top
                elif self.change_y < 0:
                    self.rect.top = platform.rect.bottom

                self.change_y = 0


            if self.rect.right >= SCREEN_WIDTH:
                self.rect.right = SCREEN_WIDTH

    def changeSpeed(self, x, y):
        self.change_x = x
        self.change_y = y


    def jump(self):
        if self.rect.bottom >= SCREEN_HEIGHT:
            self.change_y = -10
            self.rect.bottom = SCREEN_HEIGHT - 1

        #check if player is standing on a platform
        self.rect.y += 2
        hitList = pygame.sprite.spritecollide(self, self.platformList, False)
        if hitList:
            self.change_y = -10

        self.rect.y -= 2

    def gravity(self):
        self.change_y += 0.5

        if self.rect.bottom >= SCREEN_HEIGHT:
            self.change_y = 0
            self.rect.bottom = SCREEN_HEIGHT



class Platform(pygame.sprite.Sprite):
    def __init__(self,x, y, width, height):

        super().__init__()

        self.image = pygame.Surface([width, height])
        self.image.fill(forground_color)

        self.rect = self.image.get_rect()
        self.rect.x = x
        self.rect.y = y

        self.change_x = 0
        self.change_y = 0

    def update(self):
        self.rect.y += self.change_y
        self.rect.x += self.change_x



# init handling
pygame.init()
screen = pygame.display.set_mode([SCREEN_WIDTH, SCREEN_HEIGHT])
pygame.display.set_caption("Jump and Run")
clock = pygame.time.Clock()


player = Player()
player.rect.x = 300
player.rect.y = SCREEN_HEIGHT - player.rect.height

platformCounter = 0
platformList = pygame.sprite.Group()
platformListRunning = pygame.sprite.Group()

platform = Platform(levelList[platformCounter][0], levelList[platformCounter][1], levelList[platformCounter][2], levelList[platformCounter][3])
platform.change_x = -2
platformList.add(platform)
platformListRunning.add(platform)
platformCounter += 1


player.platformList = platformList




leave = False

while not leave:
    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            leave = True

        if event.type == pygame.KEYDOWN:
            if event.key == pygame.K_LEFT:
                player.changeSpeed(-velocity, 0)
            if event.key == pygame.K_RIGHT:
                player.changeSpeed(velocity, 0)
            if event.key == pygame.K_UP:
                player.jump()

        if event.type == pygame.KEYUP:
            if event.key == pygame.K_LEFT and player.change_x < 0:
                player.changeSpeed(0, 0)
            if event.key == pygame.K_RIGHT and player.change_x > 0:
                player.changeSpeed(0, 0)


    # check platforms
    for platform in platformListRunning:
        if platform.rect.right <= SCREEN_WIDTH and platformCounter < len(levelList):
            newPlatform = Platform(levelList[platformCounter][0], levelList[platformCounter][1],
                                levelList[platformCounter][2], levelList[platformCounter][3])
            newPlatform.change_x = -2
            platformList.add(newPlatform)
            platformListRunning.add(newPlatform)
            platformListRunning.remove(platform)
            platformCounter += 1

    #check if a platform is leaving the screen
    for platform in platformList:
        if platform.rect.right <= 0:
            platformList.remove(platform)





    platformList.update()
    player.update()
    screen.fill(background_color)
    platformList.draw(screen)
    screen.blit(player.image, player.rect)

    if player.gameOver:
        myFont = pygame.font.SysFont("monospace", 45)
        label = myFont.render("Verloren! ", 1, (0, 0, 0))
        screen.blit(label, (300, SCREEN_HEIGHT / 2))
    # write start text
    elif platformCounter < 4:
        myFont = pygame.font.SysFont("monospace", 45)
        label = myFont.render("Los gehts! ", 1, (0, 255, 0))
        screen.blit(label, (300, SCREEN_HEIGHT / 2))
    # player won
    elif len(platformList) == 0:
        myFont = pygame.font.SysFont("monospace", 45)
        label = myFont.render("Geschafft! ", 1, (255, 0, 0))
        screen.blit(label, (300, SCREEN_HEIGHT / 2))


    clock.tick(60)
    pygame.display.flip()


pygame.quit()